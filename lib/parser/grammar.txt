<program> -> <stmt_list> `Eof`

<stmt_list> -> (<stmt> `Seperator`)* | <stmt> 

<stmt> -> <assignment_stmt>
        | <function_call>
        | <return_stmt>
        | <function_decl>
        | <selection_stmt>
        | <while_stmt>
        | <list_stmt>

// Will improve this syntax later
<import_stmt> -> `Import` `Ident`

<assignment_stmt> -> `Ident` `Assign` <expr>

<function_call> -> `Ident` `Lparen` (<empty> | <expr> (`Comma` <expr>)*) `Rparen`

<return_stmt> -> `Return` <expr>

<function_decl> -> `Fn` `Ident` (<empty> | <expr> (`Comma` <expr>)*) <stmt_list> `End`

<selection_stmt> -> `If` <expr> `Then` <stmt_list> (`Elif` <expr> `Then` <stmt_list>)* (`Else` <stmt_list>)? `End`

<while_stmt> -> `While` <expr> `Do` <stmt_list> `End`

<list_stmt> -> `LBracket` ((<expr> `Comma`)* | <expr>) `RBracket`

<expr> -> <bool_expr>

<bool_expr> -> <not_expr> ((`And` | `Or`) <not_expr>)*

<not_expr> -> `Not`+ <comp_expr>

<comp_expr> -> <add_expr> ((`Eq`|`NotEq`|`Less`|`LessEq`|`More`|`MoreEq`) <add_expr>)*

<add_expr> -> <mult_expr> ((`Plus` | `Minus`) <mult_expr>)

<mult_expr> -> <mod_expr> ((`Mult` | `Div`) <mod_expr>)*

<mod_expr> -> <entity> (`Mod` <entity>)*

<entity> -> `Int`
        | `Float`
        | `Minus` <entity>
        | `Lparen` <expr> `RParen`
        | `Ident`
        | `Bool`
        | <function_call>

<empty> ->


